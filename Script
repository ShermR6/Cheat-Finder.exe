Clear-Host

$asciiArtUrl = "https://raw.githubusercontent.com/ShermR6/Script/main/ArtScript.ps1"
$asciiArtScript = Invoke-RestMethod -Uri $asciiArtUrl
Invoke-Expression $asciiArtScript

$encodedTitle = "Q2hlYXQgRmluZGVyLmV4ZQ=="
$titleText = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($encodedTitle))
$Host.UI.RawUI.WindowTitle = $titleText

function Get-OneDrivePath {
    try {
        $oneDrivePath = (Get-ItemProperty "HKCU:\Software\Microsoft\OneDrive" -Name "UserFolder").UserFolder
        if (-not $oneDrivePath) {
            Write-Warning "OneDrive path not found in registry. Attempting alternative detection..."
            $envOneDrive = [System.IO.Path]::Combine($env:UserProfile, "OneDrive")
            if (Test-Path $envOneDrive) {
                $oneDrivePath = $envOneDrive
                Write-Host "[-] OneDrive path detected using environment variable: $oneDrivePath" -ForegroundColor Green
            } else {
                Write-Error "Unable to find OneDrive path automatically."
            }
        }
        return $oneDrivePath
    } catch {
        Write-Error "Unable to find OneDrive path: $_"
        return $null
    }
}

function Format-Output {
    param($name, $value)
    $output = "{0} : {1}" -f $name, $value -replace 'System.Byte\[\]', ''
    if ($output -notmatch "Steam|Origin|EAPlay|FileSyncConfig.exe|OutlookForWindows") {
        return $output
    }
}

function Log-RecycleBinContents {
    Write-Host " [-] Checking Recycle Bin contents..." -ForegroundColor DarkMagenta
    $desktopPath = [System.Environment]::GetFolderPath('Desktop')
    $outputFile = Join-Path -Path $desktopPath -ChildPath "PcCheckLogs.txt"
    $recycleBinContentsHeader = "`n-----------------`nRecycle Bin Contents:`n"

    # Get Recycle Bin items for the current user
    $recycleBinItems = (New-Object -ComObject Shell.Application).Namespace(0xA).Items()

    if ($recycleBinItems.Count -gt 0) {
        Add-Content -Path $outputFile -Value $recycleBinContentsHeader
        foreach ($item in $recycleBinItems) {
            $itemPath = $item.Path
            $itemName = $item.Name
            $deletionDate = $item.ModifyDate
            $itemEntry = "Name: $itemName | Original Path: $itemPath | Deleted On: $deletionDate"
            Add-Content -Path $outputFile -Value $itemEntry
        }
        Write-Host " [-] Found $($recycleBinItems.Count) items in Recycle Bin" -ForegroundColor Yellow
    } else {
        Write-Host " [-] Recycle Bin is empty" -ForegroundColor Green
    }
}

function Main {
    List-BAMStateUserSettings
    Log-WindowsInstallDate
    Find-SusFiles
    Check-RecentDocsForTlscan
    Log-PrefetchFiles

    $zipRarFiles = Find-ZipRarFiles
    if ($zipRarFiles.Count -gt 0) {
        $desktopPath = [System.Environment]::GetFolderPath('Desktop')
        $outputFile = Join-Path -Path $desktopPath -ChildPath "PcCheckLogs.txt"
        Add-Content -Path $outputFile -Value "`n-----------------"
        Add-Content -Path $outputFile -Value "`nFound .zip and .rar files:"
        $zipRarFiles | ForEach-Object { Add-Content -Path $outputFile -Value $_.FullName }
    }

    Log-RecycleBinContents # Call the Recycle Bin logging function

    $desktopPath = [System.Environment]::GetFolderPath('Desktop')
    $logFilePath = Join-Path -Path $desktopPath -ChildPath "PcCheckLogs.txt"
    
    if (Test-Path $logFilePath) {
        Set-Clipboard -Path $logFilePath
        Write-Host "Log file copied to clipboard." -ForegroundColor Green
    } else {
        Write-Host "Log file not found on the desktop." -ForegroundColor Red
    }

    # Emailing and cleanup logic follows here...
    # (Omitted for brevity but unchanged from the original script)
}

Main
